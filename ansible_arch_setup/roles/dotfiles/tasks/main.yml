---
# tasks file for roles/dotfiles
# These tasks should run as the target_user, not root.
# 'become: false' is set on the role invocation in playbook.yml

- name: Display effective user for dotfiles tasks (should be {{ target_user }})
  ansible.builtin.debug:
    msg: "Running dotfiles tasks as effective user: '{{ ansible_effective_user_id }}' for target user '{{ target_user }}'. Home: '{{ target_user_home }}'"

- name: Ensure parent directory for dotfiles clone exists (e.g., ~/ or ~/Github)
  ansible.builtin.file:
    path: "{{ dotfiles_clone_dir | dirname }}" # Gets the parent of the clone directory
    state: directory
    mode: '0755' # Permissions for the parent directory
    owner: "{{ target_user }}"
    group: "{{ target_user }}" # Or user's primary group

- name: Clone user's dotfiles repository to {{ dotfiles_clone_dir }}
  ansible.builtin.git:
    repo: "{{ dotfiles_repo_url }}"
    dest: "{{ dotfiles_clone_dir }}"
    version: main # Or your preferred branch/tag, e.g., 'master'
    recursive: yes # Clone submodules if your dotfiles repo uses them
    accept_hostkey: yes # Automatically accept new SSH host keys (use with caution if repo URL is SSH)
  register: git_clone_status
  changed_when: >
    git_clone_status.before != git_clone_status.after or
    'Cloning into' in git_clone_status.stdout or
    (git_clone_status.stdout is defined and 'Already up to date.' not in git_clone_status.stdout and 'Current branch main is up to date.' not in git_clone_status.stdout)

- name: Ensure .config directory exists in user's home ({{ target_user_home }}/.config)
  ansible.builtin.file:
    path: "{{ target_user_home }}/.config"
    state: directory
    mode: '0755'
    owner: "{{ target_user }}"
    group: "{{ target_user }}"

# Loop through each defined "stow package" (directory) from vars/main.yml
- name: Process each stow package directory (mimicking stow behavior)
  ansible.builtin.include_tasks: process_stow_package.yml
  loop: "{{ stow_packages }}"
  loop_control:
    loop_var: stow_package_name # e.g., "hypr", "nvim"
  when: stow_packages is defined and stow_packages | length > 0
  tags:
    - stow_processing # Tag for selectively running this part

# Explicitly link root dotfiles that are not part of a stow package directory structure
# This section has been MODIFIED to correctly loop using include_tasks
- name: Link explicitly defined root dotfiles (e.g., starship.toml)
  ansible.builtin.include_tasks: link_single_root_dotfile.yml # Include the new file here
  loop: "{{ root_dotfiles_to_link }}" # Loop over the list from vars/main.yml
  loop_control:
    loop_var: root_dotfile_item # Use a distinct loop variable name
    label: "{{ root_dotfile_item.name }}" # Use the 'name' field for clearer loop output
  when:
    - root_dotfiles_to_link is defined
    - root_dotfiles_to_link | length > 0 # Ensure the list is not empty
  tags:
    - root_dotfiles # Tag for selectively running this part
