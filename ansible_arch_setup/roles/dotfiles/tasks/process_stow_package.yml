# This file is included by roles/dotfiles/tasks/main.yml for each 'stow_package_name'
# It emulates `stow` behavior by symlinking contents of a package directory.
---
- name: "Process stow package: {{ stow_package_name }}"
  vars:
    # Base path of the current stow package inside the cloned dotfiles repository
    current_stow_package_source_path: "{{ dotfiles_clone_dir }}/{{ stow_package_name }}"
  block:
    - name: "Verify stow package source directory exists: {{ current_stow_package_source_path }}"
      ansible.builtin.stat:
        path: "{{ current_stow_package_source_path }}"
      register: stow_package_dir_stat
      failed_when: not stow_package_dir_stat.stat.exists or not stow_package_dir_stat.stat.isdir
      # If the source stow package directory doesn't exist, this task will fail the play for this package.

    - name: "Find all files and directories within stow package source: {{ current_stow_package_source_path }}"
      ansible.builtin.find:
        paths: "{{ current_stow_package_source_path }}"
        recurse: true
        file_type: any # Includes files, directories, and symlinks found within the stow package source
      register: found_items_in_stow_package
      when: stow_package_dir_stat.stat.exists and stow_package_dir_stat.stat.isdir

    - name: "Debug: Items found in {{ stow_package_name }} (run with -v for details)"
      ansible.builtin.debug:
        msg: "Found {{ found_items_in_stow_package.files | length }} items in {{ current_stow_package_source_path }}"
        verbosity: 1 # Show only if -v (verbose) flag is used with ansible-playbook
      when: found_items_in_stow_package.files is defined

    # Loop through each found item and create parent directories first, then the symlink
    - name: "Create parent directories and symlinks for items in stow package: {{ stow_package_name }}"
      loop: "{{ found_items_in_stow_package.files | default([]) }}" # Loop over found items, default to empty list if none
      loop_control:
        label: "{{ item.path | basename }}" # Make loop output cleaner, shows basename of source file
      vars:
        # item.path is the absolute path to the file/dir within the cloned dotfiles_repo/stow_package_name/
        # e.g., /home/user/.dotfiles_ansible_managed_clone/hypr/.config/hypr/hyprland.conf

        # We need the path of the item *relative* to its stow package's root directory.
        # Example: if item.path is /home/user/clone/hypr/.config/hypr/conf
        # and current_stow_package_source_path is /home/user/clone/hypr
        # then relative_path_in_package should be .config/hypr/conf
        relative_path_in_package: "{{ item.path | replace(current_stow_package_source_path + '/', '') }}"

        link_source_absolute: "{{ item.path }}" # Absolute path to the source item in the cloned dotfiles repo
        link_destination_absolute: "{{ target_user_home }}/{{ relative_path_in_package }}" # Absolute path for the symlink in user's home
        link_destination_parent_dir: "{{ link_destination_absolute | dirname }}" # Parent directory of the symlink
      block: # Group tasks for each item: 1. Ensure parent dir, 2. Create link
        - name: "Ensure parent directory exists for symlink destination: {{ link_destination_parent_dir }}"
          ansible.builtin.file:
            path: "{{ link_destination_parent_dir }}"
            state: directory # Ensure it's a directory
            owner: "{{ target_user }}"
            group: "{{ target_user }}" # Or derive user's primary group more dynamically
            mode: '0755' # Standard permissions for user directories
          # This task is idempotent and runs for every item.

        - name: "Create symlink: {{ link_destination_absolute }} -> {{ link_source_absolute }}"
          ansible.builtin.file:
            src: "{{ link_source_absolute }}"   # Source of the link (in the dotfiles repo clone)
            dest: "{{ link_destination_absolute }}" # Destination of the link (in the user's home)
            owner: "{{ target_user }}"
            group: "{{ target_user }}"
            state: link # Ensure it's a symlink
            force: true # If dest exists and is not the correct symlink (or is a file/dir), replace it.
                        # This is crucial for idempotence and mimicking stow's re-stow behavior.
          # Notify about the link creation for verbosity if desired
        - name: "Debug: Symlink status for {{ link_destination_absolute }} (run with -v)"
          ansible.builtin.debug:
            msg: "Stow Package '{{ stow_package_name }}': Linked {{ link_source_absolute }} to {{ link_destination_absolute }}"
            verbosity: 1 # Show only if -v (verbose) flag is used with ansible-playbook

  rescue: # Catch errors during processing of this specific stow package
    - name: "ERROR processing stow package '{{ stow_package_name }}'"
      ansible.builtin.debug:
        msg: "Ansible failed while processing stow package '{{ stow_package_name }}'. Error details: {{ ansible_failed_result | default('Unknown error, check logs') }}. Please check your dotfiles repository structure for this package, paths in vars/main.yml, and target system permissions."
      vars:
        # ansible_failed_task and ansible_failed_result are special variables available in rescue blocks
        ansible_failed_task: "{{ ansible_failed_task | default({}) }}"
        ansible_failed_result: "{{ ansible_failed_result | default({}) }}"
    # To ensure the entire playbook stops if a critical stow package fails (optional, can be made configurable)
    - name: "Fail playbook due to critical error in stow package '{{ stow_package_name }}'"
      ansible.builtin.fail:
        msg: "Critical error processing stow package '{{ stow_package_name }}'. Playbook execution halted. See details above and in the Ansible log."
